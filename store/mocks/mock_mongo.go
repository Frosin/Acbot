// Code generated by MockGen. DO NOT EDIT.
// Source: ../store/types.go

// Package mocks is a generated GoMock package.
package mocks

import (
	types "acbot/types"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockMongoInterface is a mock of MongoInterface interface
type MockMongoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockMongoInterfaceMockRecorder
}

// MockMongoInterfaceMockRecorder is the mock recorder for MockMongoInterface
type MockMongoInterfaceMockRecorder struct {
	mock *MockMongoInterface
}

// NewMockMongoInterface creates a new mock instance
func NewMockMongoInterface(ctrl *gomock.Controller) *MockMongoInterface {
	mock := &MockMongoInterface{ctrl: ctrl}
	mock.recorder = &MockMongoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMongoInterface) EXPECT() *MockMongoInterfaceMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockMongoInterface) Connect(uri string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", uri)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockMongoInterfaceMockRecorder) Connect(uri interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockMongoInterface)(nil).Connect), uri)
}

// InsertActivation mocks base method
func (m *MockMongoInterface) InsertActivation(activation *types.Activation) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertActivation", activation)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertActivation indicates an expected call of InsertActivation
func (mr *MockMongoInterfaceMockRecorder) InsertActivation(activation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertActivation", reflect.TypeOf((*MockMongoInterface)(nil).InsertActivation), activation)
}

// GetActivations mocks base method
func (m *MockMongoInterface) GetActivations(filter interface{}) ([]*types.Activation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivations", filter)
	ret0, _ := ret[0].([]*types.Activation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivations indicates an expected call of GetActivations
func (mr *MockMongoInterfaceMockRecorder) GetActivations(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivations", reflect.TypeOf((*MockMongoInterface)(nil).GetActivations), filter)
}

// InsertUser mocks base method
func (m *MockMongoInterface) InsertUser(user *types.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser
func (mr *MockMongoInterfaceMockRecorder) InsertUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockMongoInterface)(nil).InsertUser), user)
}

// GetUsers mocks base method
func (m *MockMongoInterface) GetUsers(filter interface{}) ([]*types.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", filter)
	ret0, _ := ret[0].([]*types.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (mr *MockMongoInterfaceMockRecorder) GetUsers(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockMongoInterface)(nil).GetUsers), filter)
}
